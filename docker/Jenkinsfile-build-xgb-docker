#! /usr/bin/groovy

@Library('test-shared-library@1.17') _
import ai.h2o.ci.buildsummary.StagesSummary

final String NODE_LABEL = 'docker && !mr-0xc8'
final String DOCKER_STASH = 'h2o-3-xgb-docker-stash'

def pipelineContext = null
def version = null

properties(
    [
        parameters(
            [
                string(defaultValue: 'mr/ita/214-xgb-smoke-tests', description: 'Branch to checkout', name: 'gitBranch'),
                string(name: 'dockerRegistry', defaultValue: 'docker.h2o.ai'),
            ]
        )
    ]
)

buildSummary('https://github.com/h2oai/h2o-3', true)
buildSummary.get().addStagesSummary(this, new StagesSummary())

node (NODE_LABEL) {
    final String stageName = 'Checkout and Prepare'
    buildSummary.stageWithSummary(stageName) {
        def scmEnv = git credentialsId: 'c6bab81a-6bb5-4497-9ec9-285ef5db36ea',
                poll: false,
                url: 'https://github.com/h2oai/h2o-3',
                branch: params.gitBranch
        def pipelineContextFactory = load('scripts/jenkins/groovy/pipelineContext.groovy')
        pipelineContext = pipelineContextFactory('.', 'MODE_HADOOP', scmEnv, true)
        version = pipelineContext.getBuildConfig().getXGBImageVersion()
        pipelineContext.getUtils().stashFiles(this, DOCKER_STASH, 'docker/xgb/**,docker/scripts/*')
    }
}

parallel(pipelineContext.getBuildConfig().getSupportedXGBEnvironments().collectEntries { osName, xgbEnvs ->
    [
        "Build Images for ${osName}", {
            node(pipelineContext.getBuildConfig().getDefaultNodeLabel()) {
                xgbEnvs.each {xgbEnv ->
                    final String buildStageName = "Build ${xgbEnv.name}"
                    buildSummary.stageWithSummary(buildStageName) {
                        pipelineContext.getUtils().unstashFiles(this, DOCKER_STASH)

                        sh """
                            cd docker
                            
                            docker build \
                                -t ${pipelineContext.getBuildConfig().getXGBImageForEnvironment(osName, xgbEnv)} \
                                -f ${xgbEnv.dockerfile} \
                                --build-arg FROM_IMAGE=${xgbEnv.fromImage} \
                                --build-arg H2O_BRANCH=${params.gitBranch} \
                                .
                        """

                    }

                    final String publishStageName = "Publish ${xgbEnv.name}"
                    buildSummary.stageWithSummary(publishStageName) {
                        withCredentials([usernamePassword(credentialsId: "${params.dockerRegistry}", usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWORD')]) {
                            sh """
                                docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD ${params.dockerRegistry}
                                docker push ${pipelineContext.getBuildConfig().getXGBImageForEnvironment(osName, xgbEnv)}
                            """
                            echo "###### Docker image ${pipelineContext.getBuildConfig().getXGBImageForEnvironment(osName, xgbEnv)} built and pushed. ######"
                        }
                    }
                }
            }
        }
    ]
})
