apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

description = "H2O Application Assembly"

// Exclude unwanted dependencies
configurations {
    compile.exclude module: 'junit'
    compile.exclude module: 'mockito-all'
    compile.exclude module: 'zookeeper'
    compile.exclude module: "javax.mail.glassfish"
}

// Dependencies
dependencies {
    compile project(":h2o-app")
    compile project(":h2o-web")
    compile project(":h2o-avro-parser")
    compile project(":h2o-persist-s3")
    compile project(":h2o-persist-hdfs")
    if (project.hasProperty("doIncludeOrc") && project.doIncludeOrc == "true") {
        compile project(":h2o-orc-parser")
    }
    compile project(":h2o-parquet-parser")
    compile "org.slf4j:slf4j-log4j12:1.7.5"

    
}

//
// Bundle additional modules
// 
if (project.hasProperty("withVisDataServer") && project.withVisDataServer == "true") {
    dependencies {
        compile "ai.h2o:vis-data-server-library:${visDataServerVersion}"
        compile "ai.h2o:vis-data-server-integrated:${visDataServerVersion}"
    }

    repositories {
        maven {
            if (visDataServerVersion.endsWith("-SNAPSHOT")) {
                url "http://172.17.0.53:8081/nexus/content/repositories/snapshots"
            } else {
                url "http://172.17.0.53:8081/nexus/content/repositories/releases"
            }
        }
    }
}

shadowJar {
  mergeServiceFiles()
  classifier = ''
  // CDH 5.3.0 provides joda-time v1.6 which is too old, shadow the library instead
  if (!project.hasProperty("jacocoCoverage")) {
    relocate 'org.joda.time', 'ai.h2o.org.joda.time'
  }
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.SF'
  exclude 'synchronize.properties'
  exclude 'uploader.properties'
  exclude 'test.properties'
  exclude 'cockpitlite.properties'
  exclude 'devpay_products.properties'
  manifest {
    attributes 'Main-Class': 'water.H2OApp'
  }
}

artifacts {
  archives shadowJar
}

//
// Support make infrastructure by copying the resulting assembly into parent
// project build directory
//

def assembly = "main.jar"
def allInOne = "h2o.jar"

task copyJar(type: Copy) {
    from ("${project.buildDir}/libs"){
        include assembly
    }
    into "${project.parent.parent.buildDir}"
    rename { it.replace(assembly, allInOne) }
}
// Execute always copyJar
shadowJar.finalizedBy copyJar
// Run shadowJar as par of build
jar.finalizedBy shadowJar

