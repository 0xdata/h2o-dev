#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# This file is auto-generated by h2o-3/h2o-bindings/bin/gen_python.py
# Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)
#
from __future__ import absolute_import, division, print_function, unicode_literals

import re
from h2o.estimators.estimator_base import H2OEstimator
from h2o.exceptions import H2OValueError
from h2o.utils.typechecks import assert_is_type, numeric


class H2OPrincipalComponentAnalysisEstimator(H2OEstimator):
    """
    Principal Components Analysis

    """

    algo = "pca"

    def __init__(self, **kwargs):
        super(H2OPrincipalComponentAnalysisEstimator, self).__init__()
        self._parms = {}
        names_list = {"model_id", "training_frame", "validation_frame", "ignored_columns", "ignore_const_cols",
                      "score_each_iteration", "transform", "pca_method", "k", "max_iterations", "use_all_factor_levels",
                      "compute_metrics", "impute_missing", "seed", "max_runtime_secs"}
        if "Lambda" in kwargs: kwargs["lambda_"] = kwargs.pop("Lambda")
        for pname in kwargs:
            sname = pname[:-1] if pname[-1] == '_' else pname
            if pname in names_list:
                self._parms[sname] = kwargs[pname]
            else:
                raise H2OValueError("Unknown parameter %s" % pname)

    @property
    def training_frame(self):
        """str: Id of the training data frame (Not required, to allow initial validation of model parameters)."""
        return self._parms.get("training_frame")

    @training_frame.setter
    def training_frame(self, value):
        assert_is_type(value, str)
        self._parms["training_frame"] = value


    @property
    def validation_frame(self):
        """str: Id of the validation data frame."""
        return self._parms.get("validation_frame")

    @validation_frame.setter
    def validation_frame(self, value):
        assert_is_type(value, str)
        self._parms["validation_frame"] = value


    @property
    def ignored_columns(self):
        """List[str]: Names of columns to ignore for training."""
        return self._parms.get("ignored_columns")

    @ignored_columns.setter
    def ignored_columns(self, value):
        assert_is_type(value, [str])
        self._parms["ignored_columns"] = value


    @property
    def ignore_const_cols(self):
        """bool: Ignore constant columns. (Default: True)"""
        return self._parms.get("ignore_const_cols")

    @ignore_const_cols.setter
    def ignore_const_cols(self, value):
        assert_is_type(value, bool)
        self._parms["ignore_const_cols"] = value


    @property
    def score_each_iteration(self):
        """bool: Whether to score during each iteration of model training. (Default: False)"""
        return self._parms.get("score_each_iteration")

    @score_each_iteration.setter
    def score_each_iteration(self, value):
        assert_is_type(value, bool)
        self._parms["score_each_iteration"] = value


    @property
    def transform(self):
        """
        Enum["none", "standardize", "normalize", "demean", "descale"]: Transformation of training data (Default: "none")
        """
        return self._parms.get("transform")

    @transform.setter
    def transform(self, value):
        simple_val = re.sub(r"[^a-z]+", "", value.lower())
        assert_is_type(simple_val, "none", "standardize", "normalize", "demean", "descale")
        self._parms["transform"] = value


    @property
    def pca_method(self):
        """
        Enum["gram_s_v_d", "power", "randomized", "glrm"]: Method for computing PCA (Caution: Power and GLRM are
        currently experimental and unstable) (Default: "gram_s_v_d")
        """
        return self._parms.get("pca_method")

    @pca_method.setter
    def pca_method(self, value):
        simple_val = re.sub(r"[^a-z]+", "", value.lower())
        assert_is_type(simple_val, "gramsvd", "power", "randomized", "glrm")
        self._parms["pca_method"] = value


    @property
    def k(self):
        """int: Rank of matrix approximation (Default: 1)"""
        return self._parms.get("k")

    @k.setter
    def k(self, value):
        assert_is_type(value, int)
        self._parms["k"] = value


    @property
    def max_iterations(self):
        """int: Maximum training iterations (Default: 1000)"""
        return self._parms.get("max_iterations")

    @max_iterations.setter
    def max_iterations(self, value):
        assert_is_type(value, int)
        self._parms["max_iterations"] = value


    @property
    def use_all_factor_levels(self):
        """bool: Whether first factor level is included in each categorical expansion (Default: False)"""
        return self._parms.get("use_all_factor_levels")

    @use_all_factor_levels.setter
    def use_all_factor_levels(self, value):
        assert_is_type(value, bool)
        self._parms["use_all_factor_levels"] = value


    @property
    def compute_metrics(self):
        """bool: Whether to compute metrics on the training data (Default: True)"""
        return self._parms.get("compute_metrics")

    @compute_metrics.setter
    def compute_metrics(self, value):
        assert_is_type(value, bool)
        self._parms["compute_metrics"] = value


    @property
    def impute_missing(self):
        """bool: Whether to impute missing entries with the column mean (Default: False)"""
        return self._parms.get("impute_missing")

    @impute_missing.setter
    def impute_missing(self, value):
        assert_is_type(value, bool)
        self._parms["impute_missing"] = value


    @property
    def seed(self):
        """int: RNG seed for initialization (Default: -1)"""
        return self._parms.get("seed")

    @seed.setter
    def seed(self, value):
        assert_is_type(value, int)
        self._parms["seed"] = value


    @property
    def max_runtime_secs(self):
        """float: Maximum allowed runtime in seconds for model training. Use 0 to disable. (Default: 0.0)"""
        return self._parms.get("max_runtime_secs")

    @max_runtime_secs.setter
    def max_runtime_secs(self, value):
        assert_is_type(value, numeric)
        self._parms["max_runtime_secs"] = value


