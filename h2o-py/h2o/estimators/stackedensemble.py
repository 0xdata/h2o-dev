#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# This file is auto-generated by h2o-3/h2o-bindings/bin/gen_python.py
# Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)
#
from __future__ import absolute_import, division, print_function, unicode_literals

from h2o.estimators.estimator_base import H2OEstimator
from h2o.exceptions import H2OValueError
from h2o.frame import H2OFrame
from h2o.utils.typechecks import assert_is_type, Enum, numeric


class H2OStackedEnsembleEstimator(H2OEstimator):
    """
    Stacked Ensemble

    """

    algo = "stackedensemble"

    def __init__(self, **kwargs):
        super(H2OStackedEnsembleEstimator, self).__init__()
        self._parms = {}
        names_list = {"selection_strategy", "base_models"}
        if "Lambda" in kwargs: kwargs["lambda_"] = kwargs.pop("Lambda")
        for pname, pvalue in kwargs.items():
            if pname == 'model_id':
                self._id = pvalue
                self._parms["model_id"] = pvalue
            elif pname in names_list:
                # Using setattr(...) will invoke type-checking of the arguments
                setattr(self, pname, pvalue)
            else:
                raise H2OValueError("Unknown parameter %s = %r" % (pname, pvalue))
        self._parms["_rest_version"] = 99

    @property
    def selection_strategy(self):
        """Enum["choose_all"]: Strategy for choosing which models to stack."""
        return self._parms.get("selection_strategy")

    @selection_strategy.setter
    def selection_strategy(self, selection_strategy):
        assert_is_type(selection_strategy, None, Enum("choose_all"))
        self._parms["selection_strategy"] = selection_strategy


    @property
    def base_models(self):
        """
        List[str]: List of models which we can stack together.  Which ones are chosen depends on the selection_strategy.
        (Default: [])
        """
        return self._parms.get("base_models")

    @base_models.setter
    def base_models(self, base_models):
        assert_is_type(base_models, None, [str])
        self._parms["base_models"] = base_models


