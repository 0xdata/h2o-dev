buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.psxpaul:gradle-execfork-plugin:0.1.6"
    }
}
apply plugin: 'java'
apply plugin: com.github.psxpaul.ExecForkPlugin

List getTests() {
    // Discover all test files for project
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'find', "${projectDir}/src/test/java", '-name', '*.java'
        standardOutput = stdout
    }
    def testFiles = stdout.toString().split(System.lineSeparator())

    // transform file name to java class name
    def tests = testFiles.collect { fileName ->
        fileName.replaceAll("${projectDir}/src/test/java/", '').replaceAll('\\.java$', '').replaceAll('/', '.')
    }
    tests = tests.findAll { testName ->
        testName != "water.AAA_PreCloudLock" &&
                testName != "hex.AAA_PreCloudLock" &&
                testName != "water.parser.ParseProgressTest" &&
                testName != "water.fvec.WordCountBigTest"
    }

    def ignoreList = System.getenv('IGNORE')
    if (ignoreList) {
        // Remove ignored tests
        tests = tests.findAll { testName ->
            !ignoreList.contains(testName)
        }
    }

    def doOnly = System.getenv('DOONLY')
    if (doOnly) {
        // Remove all except DOONLY
        tests = tests.findAll { testName ->
            doOnly.contains(testName)
        }
    }

    tests.sort()
    return tests
}

enum ExecutionModes {
    SINGLE_NODE("single_node_${System.currentTimeMillis()}"),
    MULTI_NODE("multi_node_${System.currentTimeMillis()}")

    private final String clusterName

    ExecutionModes(final clusterName) {
        this.clusterName = clusterName
    }

    String getClusterName() {
        return clusterName
    }
}

def executeTests(final ExecutionModes mode) {
    def tests = getTests()
    println "Running ${project.name} multinode tests (${tests.size()} test classes)"
    new File("${buildDir}/tests.txt").text = tests.join(System.lineSeparator())

    // assemble command for command line
    def cmd = ['java', '-Xmx3g', '-Xms3g', '-ea', '-cp', sourceSets.test.runtimeClasspath.asPath]
    cmd += ["-Dbuild.id=${System.getenv('BUILD_ID') ?: ''}", "-Djob.name=${System.getenv('JOB_NAME') ?: ''}", "-Dgit.commit=${System.getenv('GIT_COMMIT') ?: ''}", "-Dgit.branch=${System.getenv('GIT_BRANCH') ?: ''}", "-Dai.h2o.name=junit_cluster_${mode.clusterName}", "-Dai.h2o.baseport=43000", "-Dai.h2o.ga_opt_out=yes", "water.junit.H2OTestRunner", "water.AAA_PreCloudLock"]
    cmd += tests
    // print command to file, for debugging
    new File("${buildDir}/jvm_cmd_${mode}.txt").text = cmd.join(' ')
    // execute tests
    exec {
        commandLine cmd
        // redirect stdout to file
        output = new FileOutputStream("${buildDir}/h2o-tests-${mode}-log.out")
    }
}

task testMultiNodeNew(dependsOn: ['prepareDaemonTasks', "startDaemon_${multiNodeClusterSize - 1}"]) {
    doLast {
        executeTests ExecutionModes.MULTI_NODE
    }
}

task testSingleNodeNew(dependsOn: ['prepareDaemonTasks']) {
    doLast {
        executeTests ExecutionModes.SINGLE_NODE
    }
}

task prepareDaemonTasks() {
    delete "${projectDir}/sandbox"
    delete fileTree(buildDir) { include '**/h2o_*.log', '**/h2o_*.err' }
    file("${projectDir}/sandbox").mkdirs()

    (multiNodeClusterSize - 1).times { number ->
        String dependentTask = "startDaemon_" + (number)
        if (number == 0) {
            dependentTask = null
        }
        task ("startDaemon_${number + 1}", type: com.github.psxpaul.task.ExecFork, dependsOn: dependentTask) {
            commandLine = 'java'
            args = [ '-Xmx3g', '-Xms3g', '-ea', '-cp', sourceSets.test.runtimeClasspath.asPath, 'water.H2O', '-name', "junit_cluster_${ExecutionModes.MULTI_NODE.getClusterName()}", '-baseport', '43000', '-ga_opt_out' ]
            standardOutput = "$buildDir/h2o_${number + 1}.log"
            errorOutput = "$buildDir/h2o_${number + 1}.err"
            waitForOutput = "Cloud of size ${number + 1} formed"
            timeout = 20
            stopAfter = testMultiNodeNew
        }
    }
}
