apply plugin: 'maven-publish'
apply plugin: "signing"



// Container for generated POMs (by default added into archive configuration)
configurations {
    pom {
        transitive = false
    }
}


//
// Record all generated POM files for given publishing task
//
project.tasks.whenTaskAdded({ t ->
    // This is adhoc specific task for defined publication
    if (t.name.contains('generatePomFileForMavenAll')) {
        t.doLast({ tt ->
            artifacts {
                pom file(t.destination)
            }
        })
    }
})

// This is part of publish module responsible by putting jars into local Ivy cache
// The code is here to support Spark assembly which expects modules in local Ivy cache
publishing {
  publications {
      mavenAll(MavenPublication) {
          from components.java
          artifactId project.name

          H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
          def projectVersion = bv.getProjectVersion()
          version isRelease || !projectVersion.contains("99999") ? "${projectVersion}" : "${projectVersion.replace('99999','1')}-SNAPSHOT"
          
          // Publish additional artifacts as documentation or source code
          configurations.toPublish.allArtifacts.each { art ->
              logger.debug("Publishing artifact for: " + art)
              artifact art
          }

          pom {
              name = project.name
              afterEvaluate {
                  description = project.description
              }
              url = 'https://github.com/h2oai/h2o-3'
              inceptionYear = '2013'

              organization {
                  name = 'H2O.ai'
                  url = 'http://h2o.ai/'
              }

              // H2O licensing
              licenses {
                  license {
                      name = 'The Apache Software License, Version 2.0'
                      url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                      distribution = 'repo'
                  }
              }

              // Info for contributors
              scm {
                  url = 'https://github.com/h2oai/h2o-dev'
                  connection = 'scm:git:https://github.com/h2oai/h2o-dev.git'
                  developerConnection = 'scm:git:git@github.com:h2oai/h2o-dev.git'
              }

              // Public H2O JIRA for issue management
              issueManagement {
                  system = 'Jira'
                  url = 'http://jira.h2o.ai'
              }
              // Developer information
              developers {
                  developer {
                      id = 'oss'
                      name = 'Open Source Google Group'
                      email = 'https://groups.google.com/forum/#!forum/h2ostream'
                  }
              }
          }
      }
  }

  repositories {
      maven {
          name "BuildRepo"
          url "$rootDir/build/repo"
      }

      if (project.ext.isRelease) {
          maven {
              name "SonatypeRelease"
              url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

              credentials {
                  username project["oss-releases.username"]
                  password project["oss-releases.password"]
              }
          }
      }

      def isInternalBuild = Boolean.valueOf(project.findProperty("isInternalBuild") ?: "false")
      if (isInternalBuild) { // We will setup local repo only for internal builds
          maven {
              name "LocalNexusRepo"
              if (project.ext.isRelease) {
                url "${localNexusLocation}/releases"
              } else {
                url "${localNexusLocation}/snapshots"
              }

              credentials {
                  username project.findProperty("local-release-maven.username") ?: "<NA>"
                  password project.findProperty("local-release-maven.password") ?: "<NA>"
              }
          }
      }
  }
}

signing {
    required {
        project.ext.isRelease || project.hasProperty("doSignAll")
    }
    sign publishing.publications
}
